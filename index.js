/** This script was initially generated by ChatGPT 4
 * Requested Actions:
 *  1) send a get request to /sites/{siteID}/deploys to find the currently locked deploy and capture the id returned in the response; siteID is a variable that requires input from the user
 *  2) Send a POST to /sites/{siteID}/deploys/{deployID}/unlock to unlock the deploy, where {deployID} is the id returned in the previous step; 
 *  3) Send a GET request to sites/{siteID}/deploys to find the most recent production deploy and capture the id returned in the response;
 *  4) Send a POST request to /sites/{siteID}/deploys/{deployID}/restoreSiteDeploy where {deployID} is the id returned in the previous step; 
 *  5) Send a POST to /site/{siteID}/deploys/{deployID}/lock where {deployID} is the same id returned in step 3
 */

// Import the GitHub core actions
const core = require('@actions/core');

// Added by me
core.debug(`GitHub Event Name: ${process.env.GITHUB_EVENT_NAME}`);

// Import the 'axios' library for making HTTP requests
const axios = require('axios');

// Gets the value of the 'netlify-auth-token' input set in the Action metadata
// Added by me
const accessToken = core.getInput('netlify-auth-token');

// Gets the value of the Netlify Site ID input set in the Action metadata
// Added by me
const siteID = core.getInput('netlify-site-id');

// Function to send GET request
async function getRequest(url) {
  try {
    const response = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${accessToken}`
      }
    });
    return response.data;
  } catch (error) {
    core.setFailed(`GET request to ${url} failed: ${error.message}`);
    }
}

// Function to send POST request
async function postRequest(url) {
  try {
    const response = await axios.post(url, null, {
      headers: {
        Authorization: `Bearer ${accessToken}`
      }
    });
    return response.data;
  } catch (error) {
    core.setFailed(`POST request to ${url} failed: ${error.message}`);
  }
}

// Function to unlock deploy
async function unlockDeploy(siteID, deployID) {
  const unlockUrl = `https://api.netlify.com/api/v1/sites/${siteID}/deploys/${deployID}/unlock`;
  await postRequest(unlockUrl);
  console.log(`Deploy ${deployID} unlocked successfully.`);
}

// Function to restore site deploy
async function restoreSiteDeploy(siteID, deployID) {
  const restoreUrl = `https://api.netlify.com/api/v1/sites/${siteID}/deploys/${deployID}/restoreSiteDeploy`;
  await postRequest(restoreUrl);
  console.log(`Deploy published to production site: ${deployID}`);
}

// Function to lock deploy
async function lockDeploy(siteID, deployID) {
  const lockUrl = `https://api.netlify.com/api/v1/sites/${siteID}/deploys/${deployID}/lock`;
  await postRequest(lockUrl);
  console.log(`Deploy locked successfully to ${deployID}` );
}

// Main function to perform the steps
async function publishLatestDeploy(siteID) {
  // Added by me to fail if required inputs are missing
  if (!siteID) {
    throw new Error('Netlify Site ID is not defined. You must provide this as an Action input.');
    core.setFailed('Error: No site ID provided.');
  }  
  
  if (!accessToken) {
    throw new Error('Netlify Auth Token not found. You must provide this as an Action input.');
    core.setFailed('Error: Netlify Auth Token not provided.');
  }

  try {
    // Step 1: Get currently locked deploy
    const deploysUrl = `https://api.netlify.com/api/v1/sites/${siteID}/deploys`;
    const deploysResponse = await getRequest(deploysUrl);
    const lockedDeploy = deploysResponse.find(deploy => deploy.locked);

    if (!lockedDeploy) {
      throw new Error('No locked deploy found.');
      core.setFailed('Error: Did not find a locked deploy in the provided Netlify Site.')
    }

    const lockedDeployID = lockedDeploy.id;
    console.log('Currently locked deploy ID:', lockedDeployID);
    // Added by me; allows the lockedDeployID to be used as an output & 
    // passed to other steps or jobs
    core.setOutput("lockedDeployID", lockedDeployID);

    // Step 2: Unlock deploy
    await unlockDeploy(siteID, lockedDeployID);

    // Step 3: Get most recent production deploy
    const recentDeploy = deploysResponse.find(deploy => deploy.context === 'production');

    if (!recentDeploy) {
      throw new Error('No recent production deploy found.');
      core.setFailed('Error: Did not find any production deploys in the provided Netlify Site.')
    }

    const recentDeployID = recentDeploy.id;
    console.log('Most recent production deploy ID:', recentDeployID);
    // Added by me; allows the latestDeployID to be used as an output & 
    // passed to other steps or jobs
    core.setOutput("latestDeployID", latestDeployID);

    // Step 4: Restore site deploy
    await restoreSiteDeploy(siteID, recentDeployID);

    // Step 5: Lock deploy
    await lockDeploy(siteID, recentDeployID);

  } catch (error) {
    console.error('Error:', error.message);
    core.setFailed(`Error: ${error.message}`)
  }
}

// Call the main function
publishLatestDeploy(siteID);
